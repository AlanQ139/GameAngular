{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/alanq/Documents/ANGULAR/Projeto/Jogo-da-Velha/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Status } from \"./gamestatus\";\nexport class Gamelogic {\n  constructor() {\n    this.gameField = [];\n    this.gameStatus = Status.STOP;\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  }\n\n  gameStart() {\n    this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.currentTurn = this.ramdomPlayerStart();\n    console.log(this.currentTurn);\n    this.gameStatus = Status.START;\n  }\n\n  ramdomPlayerStart() {\n    const startPlayer = Math.floor(Math.random() * 2) + 1;\n    return startPlayer;\n  }\n\n  setField(position, value) {\n    this.gameField[position] = value;\n  }\n\n  getPlayerColorClass() {\n    const colorClass = this.currentTurn === 2 ? 'player-two' : 'player-one';\n    return colorClass;\n  }\n\n  changePlayer() {\n    this.currentTurn = this.currentTurn === 2 ? 1 : 2;\n  }\n\n  checkGameEndFull() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let isFull = true;\n\n      if (_this.gameField.includes(0)) {\n        is;\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\alanq\\Documents\\ANGULAR\\Projeto\\Jogo-da-Velha\\src\\app\\gamelogic.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,cAAvB;AAGA,OAAM,MAAO,SAAP,CAAgB;AAQlB,EAAA,WAAA,GAAA;AANA,SAAA,SAAA,GAA2B,EAA3B;AAQI,SAAK,UAAL,GAAkB,MAAM,CAAC,IAAzB;AACA,SAAK,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAjB;AACH;;AAED,EAAA,SAAS,GAAA;AACL,SAAK,SAAL,GAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAjB;AACA,SAAK,WAAL,GAAmB,KAAK,iBAAL,EAAnB;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,WAAjB;AACA,SAAK,UAAL,GAAkB,MAAM,CAAC,KAAzB;AACH;;AAED,EAAA,iBAAiB,GAAA;AACb,UAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAc,CAAzB,IAA4B,CAAhD;AACA,WAAO,WAAP;AACH;;AAED,EAAA,QAAQ,CAAC,QAAD,EAAmB,KAAnB,EAAgC;AACpC,SAAK,SAAL,CAAe,QAAf,IAA2B,KAA3B;AACH;;AAED,EAAA,mBAAmB,GAAA;AACf,UAAM,UAAU,GAAI,KAAK,WAAL,KAAoB,CAArB,GAA0B,YAA1B,GAAyC,YAA5D;AACA,WAAO,UAAP;AACH;;AAED,EAAA,YAAY,GAAA;AACR,SAAK,WAAL,GAAoB,KAAK,WAAL,KAAqB,CAAtB,GAA2B,CAA3B,GAA+B,CAAlD;AACH;;AAEK,EAAA,gBAAgB,GAAA;AAAA;;AAAA;AAClB,UAAI,MAAM,GAAG,IAAb;;AAEA,UAAK,KAAI,CAAC,SAAL,CAAe,QAAf,CAAwB,CAAxB,CAAL,EAAgC;AAC5B,QAAA,EAAE;AACL;AALiB;AAMrB;;AA7CiB","sourcesContent":["import { Status } from \"./gamestatus\";\n\n\nexport class Gamelogic {\n\n    gameField: Array<number> = [];\n\n    currentTurn!: number;\n\n    gameStatus: Status;\n\n    public constructor(){ \n        \n        this.gameStatus = Status.STOP;\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    gameStart(): void{\n        this.gameField = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n        this.currentTurn = this.ramdomPlayerStart();\n        console.log(this.currentTurn);\n        this.gameStatus = Status.START;\n    }\n\n    ramdomPlayerStart(): number{\n        const startPlayer = Math.floor(Math.random()*2)+1;\n        return startPlayer;\n    }\n\n    setField(position: number, value: number): void{\n        this.gameField[position] = value;\n    }\n\n    getPlayerColorClass(): string{\n        const colorClass = (this.currentTurn ===2) ? 'player-two' : 'player-one';\n        return colorClass;\n    }\n\n    changePlayer(): void{\n        this.currentTurn = (this.currentTurn === 2) ? 1 : 2;\n    }\n\n    async checkGameEndFull(): Promise<boolean>{\n        let isFull = true;\n\n        if ( this.gameField.includes(0)){\n            is\n        }\n    }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}